package com.redclockapps.nummus;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.os.Bundle;
import android.os.Handler;
import android.text.format.Time;
import android.view.Menu;
import android.view.View;
import android.widget.ProgressBar;
import android.widget.TextView;

public class MainActivity extends Activity 
{
	//creates the variables that will be used for the whole class
	incomeExpensesData incExpObj;
	preferencesData prefObj;
	Time today;
	
	//instantiates the views 
	TextView totalSavings;
	
	//progress bar for report screen
	static int progress;
	ProgressBar progressBar;
	int progressStatus = 0;
	Handler handler = new Handler();
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        
        //checks to see if the database exists on device
        //if not, copy
        try
        {
        	String destinyPath = "/data/data/" + getPackageName() + "/databases";
        	File f = new File(destinyPath);
        	
        	if(!f.exists())
        	{
        		f.mkdirs();
        		f.createNewFile();
        		
        		//copy the database from the assets folder into the databases folder
        		copyDB(getBaseContext().getAssets().open("dbnummus.sqlite"), new FileOutputStream(destinyPath + "/DBNummus"));
        	}
        } catch (FileNotFoundException e)
        {
        	e.printStackTrace();
        } catch (IOException e) 
        {
        	e.printStackTrace();
		}
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) 
    {
        getMenuInflater().inflate(R.menu.activity_main, menu);
        return true;
    }

    @Override
	protected void onResume() 
    {
		super.onResume();
		
		totalIncomeExpensesValues(getDataToCalculateSavings());
	}

	//copies database to device
    public void copyDB(InputStream inputStream, OutputStream outputStream) throws IOException
    {
    	//copy 1k bytes at a time
    	byte[] buffer = new byte[1024];
    	int length;
    	
    	while ((length = inputStream.read(buffer)) > 0)
    	{
    		outputStream.write(buffer, 0, length);
    	}
    	
    	inputStream.close();
    	outputStream.close();
    }
    
    //get the date to calculate the savings
    private Cursor getDataToCalculateSavings()
    {
    	String month = null;
    	String year = null;
    	
    	int monthShowing;
    	int yearShowing;
    	
    	incExpObj = new incomeExpensesData(this);
    	prefObj = new preferencesData(this);
    	
    	//Get the current date
    	today = new Time(Time.getCurrentTimezone());
    	today.setToNow();
    	
    	monthShowing = (today.month) + 1;
    	yearShowing = (today.year);
    	
    	//uses the preferences table to determine which total of savings to show
    	//SIDE NOTE - The database is already open, and it should still open after this
    	//that is the preferences object do not open or close the database
    	prefObj.open();
    	int showBy = prefObj.getPreferences(1);
    	prefObj.close();

    	month = String.valueOf(monthShowing);
    	year = String.valueOf(yearShowing);
    	
    	if (month.length() < 2)
    	{
    		month = "0" + month;
    	}
    	
    	//opens the connection with the database, closes when retrives the objects
    	incExpObj.open();
    	Cursor incomeExpensesCursor = incExpObj.getInitialDataToDisplay(showBy, month, year);
    	
    	return incomeExpensesCursor;
    }
    
    //calculate the total of savings
    private void totalIncomeExpensesValues(Cursor incExpCursor)
    {
    	double total = 0;
    	double totalIncome = 0;
    	double totalExpenses = 0;
    	
    	if (incExpCursor.moveToFirst())
    	{
    		do
    		{
    			if (incExpCursor.getInt(2) == 0)
    	    	{
    	    		totalIncome += incExpCursor.getDouble(1);
    	    	}
    	    	else if (incExpCursor.getInt(2) == 1)
    	    	{
    	    		totalExpenses += incExpCursor.getDouble(1);
    	    	}		
    		}
    		while (incExpCursor.moveToNext());
    	}
    	
    	//closes the connection with the database
    	incExpObj.close();
    	
    	total = totalIncome - totalExpenses;
    	
        totalSavings = (TextView) findViewById(R.id.textSavings);
    	totalSavings.setText("Savings $" + String.format("%.2f", total));
    	
    	defineColorLabelTotalSavings(total, totalSavings);
    }
    
    //defines the color of the savings text
    private void defineColorLabelTotalSavings(double totalSavingsDefined, TextView textSavings)
    {
    	if (totalSavingsDefined < 0)
    	{
    		textSavings.setTextColor(Color.parseColor("#C9793B"));	
    	}
    	else
    	{
    		textSavings.setTextColor(Color.parseColor("#79A685"));
    	}
    }
    
    //Buttons
    public void buttonGreenPigClicked(View view)
    {
    	startActivity(new Intent("com.redclockapps.nummus.incomeActivity"));
    }
    
    public void buttonRedPigClicked(View view)
    {
    	startActivity(new Intent("com.redclockapps.nummus.expensesActivity"));
    }
    
    public void buttonBluePigClicked(View view)
    {	
    	progressBar = (ProgressBar) findViewById(R.id.progressBar);
    	progressBar.setVisibility(View.VISIBLE);
    	
    	new Thread(new Runnable() 
    	{
			public void run() 
			{
				try 
				{
					Thread.sleep(1000);
				} 
				catch (InterruptedException e) 
				{
					e.printStackTrace();
				}
				
				handler.post(new Runnable() 
				{	
					public void run() 
					{
						startActivity(new Intent("com.redclockapps.nummus.reportActivity"));
						//progressBar.setVisibility(View.GONE);
					}
				});
			}
		}).start();
    	
    	progressBar.setVisibility(View.GONE);
    	
    	//startActivity(new Intent("com.redclockapps.nummus.reportActivity"));
    }
    
    public void buttonPreferencesClicked(View view)
    {
    	startActivity(new Intent("com.redclockapps.nummus.preferencesActivity"));
    }
}
