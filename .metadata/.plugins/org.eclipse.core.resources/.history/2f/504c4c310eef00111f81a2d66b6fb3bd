package com.redclockapps.nummus;

import java.text.DecimalFormat;

import android.app.Activity;
import android.app.AlertDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Color;
import android.media.MediaPlayer;
import android.media.MediaPlayer.OnCompletionListener;
import android.os.Bundle;
import android.text.format.Time;
import android.view.GestureDetector.OnGestureListener;
import android.view.inputmethod.InputMethodManager;
import android.view.GestureDetector;
import android.view.Gravity;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.RelativeLayout;
import android.widget.SimpleCursorAdapter;
import android.widget.TextView;
import android.widget.Toast;
import android.widget.DatePicker.OnDateChangedListener;

public class expensesActivity extends Activity implements OnGestureListener
{
	//creates the local variables and objects
	categoryData ctgObj;
	accountData accObj;
	incomeExpensesData incExpObj;
	preferencesData prefObj;
	
	RelativeLayout categoryView;
	RelativeLayout dateView;
	RelativeLayout amountView;
	RelativeLayout accountView;
	
	ListView categoriesListView;
	ListView accountsListView;
	
	Button addCategory;
	
	EditText amountTextView;
	
	DatePicker datePicker;
	TextView dateText;
	Time today;
	
	private GestureDetector gestureScanner;
    @SuppressWarnings("deprecation")
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.expenses_screen);
        
        this.additionalonCreate();
        
       gestureScanner = new GestureDetector(this);
    }
    
    @Override
  	protected void onResume() 
    {
  		super.onResume();
  		
  		this.populateListViews();
  	}
    
    @Override
	public boolean onTouchEvent(MotionEvent event) 
    {
    	return gestureScanner.onTouchEvent(event);
	}
    
	private void additionalonCreate()
    {	
    	//instantiates the listviews
    	categoriesListView = (ListView) findViewById(R.id.listViewCategoriesExpensesScreen);
    	accountsListView = (ListView) findViewById(R.id.listViewAccountsExpensesScreen);
		
    		//category list view
    	//set the title of the category listview
    	TextView titleCategories = new TextView(this);
    	titleCategories.setText("Categories");
    	titleCategories.setTextSize(15);
    	titleCategories.setTextColor(Color.parseColor("#FFFFFF"));
    	titleCategories.setGravity(Gravity.CENTER);
    	titleCategories.setBackgroundResource(R.drawable.list_view_expenses_title);
    	categoriesListView.addHeaderView(titleCategories);
    	
    		//account list view
    	//set the title of the account listview
    	TextView titleAccounts = new TextView(this);
    	titleAccounts.setText("Accounts");
    	titleAccounts.setTextSize(15);
    	titleAccounts.setTextColor(Color.parseColor("#FFFFFF"));
    	titleAccounts.setGravity(Gravity.CENTER);
    	titleAccounts.setBackgroundResource(R.drawable.list_view_expenses_title);
    	accountsListView.addHeaderView(titleAccounts);
    	
    	this.setDate();
    }
	
	private void populateListViews()
	{
    	//instantiates the objects
    	ctgObj = new categoryData(this);
    	accObj = new accountData(this);
    	
    	//opens with subview categories showing
    	setSubViewScreen(1);
    	
    	//instantiates the listviews
    	categoriesListView = (ListView) findViewById(R.id.listViewCategoriesExpensesScreen);
    	accountsListView = (ListView) findViewById(R.id.listViewAccountsExpensesScreen);
    	
    	ctgObj.open();
    	Cursor listCategories = ctgObj.getCategoriesToDisplay(1);
    	
    	@SuppressWarnings("deprecation")
    	SimpleCursorAdapter ctgAdapter = new SimpleCursorAdapter(this, android.R.layout.simple_list_item_checked, listCategories, new String[] {"Name"}, new int[] {android.R.id.text1});
    	
    	categoriesListView.setAdapter(ctgAdapter);
    	categoriesListView.setSelected(true);
    	categoriesListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    	
    	accObj.open();
    	Cursor listAccounts = accObj.getAccountsToDisplay();
    	
    	@SuppressWarnings("deprecation")
    	SimpleCursorAdapter accAdapter = new SimpleCursorAdapter(this, android.R.layout.simple_list_item_checked, listAccounts, new String[] {"Name"}, new int[] {android.R.id.text1});
    	
    	accountsListView.setAdapter(accAdapter);
    	accountsListView.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
    	accountsListView.setSelected(true);
    	
    	//close the connections with the database
    	ctgObj.close();
    	accObj.close();
	}

	//Define which subview will be showing
    private void setSubViewScreen(int sender)
    {
    	categoryView = (RelativeLayout) findViewById(R.id.categorySubViewExpensesScreen);
    	dateView = (RelativeLayout) findViewById(R.id.dateSubViewExpensesScreen);
    	amountView = (RelativeLayout) findViewById(R.id.amountSubViewExpensesScreen);
    	accountView = (RelativeLayout) findViewById(R.id.accountSubViewExpensesScreen);
    	
    	addCategory = (Button) findViewById(R.id.addCategoryButtonExpensesScreen);
    	
    	//1 - category View
    	//2 - amount View
    	//3 - date view
    	//4 - account view
    	switch (sender)
    	{
    		case 1:
    			categoryView.setVisibility(View.VISIBLE);
    			amountView.setVisibility(View.INVISIBLE);
    			dateView.setVisibility(View.INVISIBLE);
    			accountView.setVisibility(View.INVISIBLE);
    			addCategory.setVisibility(View.VISIBLE);
    			break;
    			
    		case 2:
    			categoryView.setVisibility(View.INVISIBLE);
    			amountView.setVisibility(View.VISIBLE);
    			dateView.setVisibility(View.INVISIBLE);
    			accountView.setVisibility(View.INVISIBLE);
    			addCategory.setVisibility(View.INVISIBLE);
    			this.setFocusAmountTextView();
    			break;
    			
    		case 3:
    			categoryView.setVisibility(View.INVISIBLE);
    			amountView.setVisibility(View.INVISIBLE);
    			dateView.setVisibility(View.VISIBLE);
    			accountView.setVisibility(View.INVISIBLE);
    			addCategory.setVisibility(View.INVISIBLE);
    			break;
    			
    		case 4:
    			categoryView.setVisibility(View.INVISIBLE);
    			amountView.setVisibility(View.INVISIBLE);
    			dateView.setVisibility(View.INVISIBLE);
    			accountView.setVisibility(View.VISIBLE);
    			addCategory.setVisibility(View.INVISIBLE);
    			break;
    			
    		default:
    			break;
    	}
    	
    }
    
    //Buttons
    public void categoryButtonExpensesClicked(View view)
    {
    	setSubViewScreen(1);
    }
    
    public void amountButtonExpensesClicked(View view)
    {
    	setSubViewScreen(2);
    }
    
    public void dateButtonExpensesClicked(View view)
    {
    	setSubViewScreen(3);
    }

    public void accountButtonExpensesClicked(View view)
    {
    	setSubViewScreen(4);
    }
    
    public void addCategoryButtonExpensesClicked(View view)
    {
    	startActivity(new Intent("com.redclockapps.nummus.addCategoryActivity"));
    }
	
    //show keyboard when focus on the amount textview
    public void setFocusAmountTextView()
    {
    	amountTextView = (EditText) findViewById(R.id.amountTextFieldExpensesScreen);
    	
    	amountTextView.requestFocus();
    	
    	InputMethodManager mgr = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
    	mgr.showSoftInput(amountTextView, InputMethodManager.SHOW_IMPLICIT);
    }
    
    //sets the date of the date textview
    public void setDate()
    {
    	//get the current date to initialize
    	int monthShowing;
    	int yearShowing;
    	int dayShowing;
    	
    	//Get the current date
    	today = new Time(Time.getCurrentTimezone());
    	today.setToNow();
    	
    	dayShowing = (today.monthDay);
    	monthShowing = (today.month);
    	yearShowing = (today.year);
    	
    	//get the date
    	datePicker = (DatePicker) findViewById(R.id.datePickerExpensesScreen);
    	dateText = (TextView) findViewById(R.id.dateTextFieldExpensesScreen);
    	
        class MyOnDateChangedListener implements OnDateChangedListener
        {
        	//Override the method in the super class that controls the dates changes in the datepicker
        	public void onDateChanged(DatePicker view, int year, int monthOfYear, int dayOfMonth) 
    		{
    			incomeActivity incObj = new incomeActivity();
    			String month = incObj.getMonth(monthOfYear);
    			
    			dateText.setText(month + " " + dayOfMonth +  ", " + year);
    		}
        };
        
        //initializes the datepicker
        datePicker.init(yearShowing, monthShowing, dayShowing, new MyOnDateChangedListener());
        
        //initializes the date textview
        dateText.setText(this.getMonth(monthShowing) + " " + dayShowing + ", " + yearShowing);
    }
    
    //cancel operation, return to previous screen
    private void cancelOperation()
    {
		AlertDialog.Builder builderDialog = new AlertDialog.Builder(this);
		builderDialog.setMessage("Confirm cancel?")
		.setTitle("Cancel add income")
		.setCancelable(false)
		.setPositiveButton("Yes", new DialogInterface.OnClickListener()
			{
				public void onClick(DialogInterface dialog, int which) 
				{
					expensesActivity.this.finish();
				}
			})
		.setNegativeButton("No", new DialogInterface.OnClickListener() 
		{
			public void onClick(DialogInterface dialog, int which) 
			{
				dialog.cancel();
			}
		});
		
		AlertDialog alert = builderDialog.create();
		alert.show();
    }
    
    //validates to see if there is any empty field
    private boolean validateNewIncome()
    {
    	boolean _validated = true;
    	
    	String messageTitle = "Ops!";
    	String message = null;
    	int screen = -1;
    	boolean categoryChecked = false;
    	boolean accountChecked = false;
    	
    	//instantiates the objects
    	categoriesListView = (ListView) findViewById(R.id.listViewCategoriesExpensesScreen);
    	accountsListView = (ListView) findViewById(R.id.listViewAccountsExpensesScreen);
    	amountTextView = (EditText) findViewById(R.id.amountTextFieldExpensesScreen);
    	
    	//checks to see if a category was selected
    	for (int i=0; i<categoriesListView.getCount(); i++)
    	{
    		if(categoriesListView.isItemChecked(i))
    		{
    			categoryChecked = true;
    		}
    	}
    	
    	if (categoryChecked == false)
    	{
			_validated = false;
			message = "Please, select the category";
			screen = 1;
    	}
    	
    	//checks to see if an account was selected
    	for (int i=0; i<accountsListView.getCount(); i++)
    	{
    		if(accountsListView.isItemChecked(i))
    		{
    			accountChecked = true;
    		}
    	}
    	
    	if (accountChecked == false)
    	{
			_validated = false;
			message = "Please, select the account";
			screen = 4;
    	}
    	
    	//checks to see if the amount was fill
    	if (amountTextView.getText().toString().length() == 0)
    	{
			_validated = false;
			message = "Please, provide the amount";
			screen = 2;
    	}
    	
    	if (_validated == false)
    	{
			AlertDialog.Builder builderDialog = new AlertDialog.Builder(this);
			builderDialog.setMessage(message)
			.setTitle(messageTitle)
			.setCancelable(false)
			.setPositiveButton("OK", new DialogInterface.OnClickListener()
				{
					public void onClick(DialogInterface dialog, int which) 
					{
						dialog.cancel();						
					}
				});
			
			AlertDialog alert = builderDialog.create();
			alert.show();
			
			InputMethodManager mgr = (InputMethodManager) getSystemService(Context.INPUT_METHOD_SERVICE);
	    	mgr.hideSoftInputFromWindow(amountTextView.getWindowToken(), 0);
			
			switch (screen)
			{
				case 1:
					this.setSubViewScreen(screen);
					break;
				case 2:
					this.setSubViewScreen(screen);
					break;
				case 4:
					this.setSubViewScreen(screen);
					break;
				default:
					break;
			}
    	}

    	return _validated;
    }
    
    //saves the new income
    private boolean saveNewExpenses()
    {
    	boolean _incExpAdded = false;
    	
    	double amount;
    	String dateShowing = null;
    	String categoryName = null;
    	String accountName = null;
    	
    	Cursor cursorGetItemListView;
    	
    	incExpObj = new incomeExpensesData(this);
    	
    	//instantiates the objects
    	categoriesListView = (ListView) findViewById(R.id.listViewCategoriesExpensesScreen);
    	accountsListView = (ListView) findViewById(R.id.listViewAccountsExpensesScreen);
    	amountTextView = (EditText) findViewById(R.id.amountTextFieldExpensesScreen);
    	datePicker = (DatePicker) findViewById(R.id.datePickerExpensesScreen);
    	
    	for (int i=0; i<categoriesListView.getCount(); i++)
    	{
    		if (categoriesListView.isItemChecked(i))
    		{
    			cursorGetItemListView = (Cursor) categoriesListView.getItemAtPosition(i);
    			categoryName = cursorGetItemListView.getString(cursorGetItemListView.getColumnIndex("Name"));
    		}
    	}
    	
    	//clean the temp cursor
    	cursorGetItemListView = null;
    	
    	for (int i=0; i<accountsListView.getCount(); i++)
    	{
    		if (accountsListView.isItemChecked(i))
    		{
    			cursorGetItemListView = (Cursor) accountsListView.getItemAtPosition(i);
    			accountName = cursorGetItemListView.getString(cursorGetItemListView.getColumnIndex("Name"));
    		}
    	}
    	
    	DecimalFormat decimalDouble = new DecimalFormat("#.00");
    	amount = Double.parseDouble(amountTextView.getText().toString());
    	amount = Double.parseDouble(decimalDouble.format(amount));
    	
    	String daySelected = String.valueOf(datePicker.getDayOfMonth());
    	if (daySelected.length() == 1)
    	{
    		daySelected = "0" + daySelected;
    	}
    	
    	dateShowing = (datePicker.getMonth()+1) + "/" + daySelected + "/" + datePicker.getYear();
    	if (dateShowing.length() <= 9)
    	{
    		dateShowing = "0" + dateShowing;
    	}
    	
    	//opens the connection with the database
    	incExpObj.open();
    	
    	//saves the new income
    	_incExpAdded = incExpObj.addIncomeExpenses(categoryName, amount, dateShowing, accountName, 1);
    	
    	
    	//closes the connection with the database
    	incExpObj.close();
    	
    	return _incExpAdded;
    }
    
    private void finalizeScreen()
    {
    	prefObj = new preferencesData(this);
    	
    	prefObj.open();
    	int soundsOn = prefObj.getPreferences(0);
    	prefObj.close();
    	
    	if (soundsOn == 0)
    	{
        	MediaPlayer mp = MediaPlayer.create(this, R.raw.cashreg);
        	
        	mp.setOnCompletionListener(new OnCompletionListener() 
        	{
    			public void onCompletion(MediaPlayer mp) 
    			{
    				mp.release();
    			}
    		});
        	
        	mp.start();	
    	}
    	
    	Toast.makeText(this, "expense added with success", Toast.LENGTH_LONG).show();
    	this.finish();
    }
    
    //returns the month in string
    public String getMonth(int month)
    {
    	String monthComplete = null;
    	
    	switch(month)
    	{
    		case 0:
    			monthComplete = "January";
    			break;
    		case 1:
    			monthComplete = "February";
    			break;
    		case 2:
    			monthComplete = "March";
    			break;
    		case 3:
    			monthComplete = "April";
    			break;
    		case 4:
    			monthComplete = "May";
    			break;
    		case 5:
    			monthComplete = "June";
    			break;
    		case 6:
    			monthComplete = "July";
    			break;
    		case 7:
    			monthComplete = "August";
    			break;
    		case 8:
    			monthComplete = "September";
    			break;
    		case 9:
    			monthComplete = "October";
    			break;
    		case 10:
    			monthComplete = "November";
    			break;
    		case 11:
    			monthComplete = "December";
    			break;
    	}

    	return monthComplete;
    }
    
	public boolean onDown(MotionEvent e) 
	{
		// TODO Auto-generated method stub
		return false;
	}

	public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) 
	{
		try
		{
			if(Math.abs(e1.getY() - e2.getY()) > 250)
			{
				return false;
			}
			
			if(e1.getX() - e2.getX() > 1 && Math.abs(velocityX) > 1)
			{
				//swipe left
				this.cancelOperation();
			}
			else if (e2.getX() - e1.getX() > 1 && Math.abs(velocityX) > 1)
			{
				//swipe right
				boolean _isValidate = this.validateNewIncome();
				
				if (_isValidate == true)
				{
					boolean _isSaved = this.saveNewExpenses();
					
					if (_isSaved == true)
					{
						this.finalizeScreen();
					}
				}
			}
		} catch (Exception e)
		{
			e.printStackTrace();
		}
		return true;
	}

	public void onLongPress(MotionEvent e) 
	{
		// TODO Auto-generated method stub
		
	}

	public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) 
	{
		// TODO Auto-generated method stub
		return false;
	}

	public void onShowPress(MotionEvent e) 
	{
		// TODO Auto-generated method stub
		
	}

	public boolean onSingleTapUp(MotionEvent e) 
	{
		// TODO Auto-generated method stub
		return false;
	}

}
